<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Snails</name>
    </assembly>
    <members>
        <member name="T:Snails.Agent.Board">
            <summary>
            The snails board. This class wraps BoardData to provide additional, high-level functionality such as evaluating board positions and manipulating the board by executing moves.
            </summary>
        </member>
        <member name="F:Snails.Agent.Board.evaluations">
            <summary>
            Hash table containing previous board evaluations to prevent recalculating the board's score every time
            </summary>
        </member>
        <member name="P:Snails.Agent.Board.NumCachedEntries">
            <summary>
            The entries currently in the hash table
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.ClearCache">
            <summary>
            Clears the Hash Table containing the board evaluations
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.#ctor(Snails.IWorldState)">
            <summary>
            Creates an instance of a snails board based on the given player world state.
            </summary>
        </member>
        <member name="F:Snails.Agent.Board.board">
            <summary>
            The board data this board operates on.
            </summary>
        </member>
        <member name="F:Snails.Agent.Board.tiles">
            <summary>
            The squares of the board. A square provides extra functionality to check for contents.
            </summary>
        </member>
        <member name="P:Snails.Agent.Board.Item(System.Int32,System.Int32)">
            <summary>
            Returns a square on the board.
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.GetOpponentID(System.UInt32)">
            <summary>
            Inverts the given ID. Assumes 2 players.
            </summary>
        </member>
        <member name="P:Snails.Agent.Board.Width">
            <summary>
            Width in squares
            </summary>
        </member>
        <member name="P:Snails.Agent.Board.Height">
            <summary>
            Height in squares
            </summary>
        </member>
        <member name="P:Snails.Agent.Board.HashCode">
            <summary>
            The hash code representing the board's current contents. Other attributes such as the turn number or whose turn it is are not taken into account.
            </summary>
        </member>
        <member name="F:Snails.Agent.Board.currentPlayer">
            <summary>
            The ID of the player who is about to move given the current board position.
            </summary>
        </member>
        <member name="P:Snails.Agent.Board.Opponent">
            <summary>
            The ID of the opponent player
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.GetTurnCount(System.Int32)">
            <summary>
            Returns the number of turns for the player of the given id.
            </summary>
        </member>
        <member name="F:Snails.Agent.Board.history">
            <summary>
            The undo history.
            </summary>
        </member>
        <member name="P:Snails.Agent.Board.UndoSteps">
            <summary>
            The amount of moves that can be undone.
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.Move(Snails.Agent.Move)">
            <summary>
            Executes the given move. Null represents a pass.
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.UndoMove">
            <summary>
            Undoes the lates move.
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.UndoAll">
            <summary>
            Undoes all moves so the state of the board matches the player world state the board was set to.
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.OnBoardChanged">
            <summary>
            Called when the board state has changed (executing moves/undo moves)
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.ValidatePosition(System.Int32,System.Int32)">
            <summary>
            Indicates whether the given position is a valid position on the board (within the boundaries).
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.ValidatePosition(Snails.Vec2Int)">
            <summary>
            Indicates whether the given position is a valid position on the board (within the boundaries).
            </summary>
        </member>
        <member name="P:Snails.Agent.Board.IsGameOver">
            <summary>
            Indicates whether the game is over (both players cannot capture any further squares).
            </summary>
        </member>
        <member name="F:Snails.Agent.Board.evaluation">
            <summary>
            The cached evaluation of the board. This prevents redundant hashtable lookups when the board state has not changed.
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.Evaluate">
            <summary>
            Evaluates the board from the player's point of view who did the last move.
            Returns an estimation between -1000 and 1000 indicating how likely it is to win the game given this board position.
            Optimisation: Evaluation reports are cached so future evaluations of the same board position are sped-up.
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.CountCapturableTiles(System.UInt32)">
            <summary>
            Count all empty tiles which may be accessible to the player of the given id
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.GetMove(Snails.Vec2Int)">
            <summary>
            Generate a move starting at the player's current position with the given step delta.
            </summary>
            <param name="delta"></param>
            <returns>A valid move or null if this move is not possible or does not result in any changes.</returns>
        </member>
        <member name="M:Snails.Agent.Board.GetMoves">
            <summary>
            Returns a list containing all valid next moves given the current board state
            If the current player's position does not allow any further squares to be captured the list will contain only a pass (null).
            </summary>
        </member>
        <member name="M:Snails.Agent.Board.ToString">
            <summary>
            Returns a string representation of the board's current state.
            </summary>
        </member>
        <member name="T:Snails.Agent.BoardData">
            <summary>
            Represents the contents of a snails board providing essential, low-level functionality. 
            Statistics are incrementally updated as contents change.
            </summary>
        </member>
        <member name="P:Snails.Agent.BoardData.Width">
            <summary>
            The width of the board in squares
            </summary>
        </member>
        <member name="P:Snails.Agent.BoardData.Height">
            <summary>
            The height of the board in squares
            </summary>
        </member>
        <member name="P:Snails.Agent.BoardData.HashCode">
            <summary>
            The hash code representing the board's current contents
            </summary>
        </member>
        <member name="M:Snails.Agent.BoardData.GetPlayerPosition(System.UInt32)">
            <summary>
            Returns the position of the player with the given ID
            </summary>
        </member>
        <member name="M:Snails.Agent.BoardData.GetCount(System.UInt32)">
            <summary>
            Returns the count of squares containing the given ID;
            This function does not distinguish between snails and trails but returns the count of both snails and trails if a player's ID is passed as ID.
            </summary>
        </member>
        <member name="M:Snails.Agent.BoardData.ToString">
            <summary>
            Returns a string representation of the current board contents
            </summary>
        </member>
        <member name="M:Snails.Agent.BoardData.GenerateKeys(System.Int32,System.Int32)">
            <summary>
            Generates one key for each possible board state
            </summary>
        </member>
        <member name="M:Snails.Agent.BoardData.GenerateHashCode">
            <summary>
            Generates a hash code representing the board's current state
            </summary>
        </member>
        <member name="T:Snails.Agent.BoardEvaluationReport">
            <summary>
            The results of a board evaluation
            </summary>
        </member>
        <member name="M:Snails.Agent.BoardEvaluationReport.#ctor(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new evaluation report
            </summary>
        </member>
        <member name="P:Snails.Agent.BoardEvaluationReport.TurnNumber">
            <summary>
            The turn number the board was evaluated
            </summary>
        </member>
        <member name="M:Snails.Agent.BoardEvaluationReport.GetScore(System.UInt32)">
            <summary>
            The score of the board
            </summary>
        </member>
        <member name="P:Snails.Agent.BoardEvaluationReport.CapturableTilesPlayer1">
            <summary>
            The amount of accessible squares which can be captured by player 1
            </summary>
        </member>
        <member name="P:Snails.Agent.BoardEvaluationReport.CapturableTilesPlayer2">
            <summary>
            The amount of accessible squares which can be captured by player 2
            </summary>
        </member>
        <member name="T:Snails.Agent.Constraints">
            <summary>
            Resource constraints for <see cref="T:Snails.Agent.IPlayerAgent"/>s when computing moves via <see cref="M:Snails.Agent.IPlayerAgent.ComputeNextMoveAsync(Snails.IWorldState,Snails.Agent.Constraints)"/>
            </summary>
        </member>
        <member name="M:Snails.Agent.Constraints.#ctor(System.Int64,System.Int64)">
            <summary>
            Create an instance of <see cref="T:Snails.Agent.Constraints"/>
            </summary>
            <param name="maxTimePerTurn">The maximum amount of time in milliseconds an <see cref="T:Snails.Agent.IPlayerAgent"/> is allowed to spend on computing the next move</param>
            <param name="maxTimePerSession">The maximum amount of time in milliseconds an <see cref="T:Snails.Agent.IPlayerAgent"/> is allowed to spend on computing moves within a game session</param>
        </member>
        <member name="F:Snails.Agent.Constraints.MaxTimePerTurn">
            <summary>
            The maximum amount of time in milliseconds an <see cref="T:Snails.Agent.IPlayerAgent"/> is allowed to spend on computing the next move
            </summary>
        </member>
        <member name="F:Snails.Agent.Constraints.MaxTimePerSession">
            <summary>
            The maximum amount of time in milliseconds an <see cref="T:Snails.Agent.IPlayerAgent"/> is allowed to spend on computing moves within a game session
            </summary>
        </member>
        <member name="T:Snails.Agent.IPlayerAgent">
            <summary>
            A player agent that can compute next moves given the current game state
            </summary>
        </member>
        <member name="M:Snails.Agent.IPlayerAgent.ComputeNextMoveAsync(Snails.IWorldState,Snails.Agent.Constraints)">
            <summary>
            Compute the next move given the current game state. Not thread-safe.
            </summary>
            <param name="worldState">The current game state</param>
            <param name="settings">The resource constraints for computing the next move</param>
            <returns>An awaitable task with the movement command to be performed next</returns>
        </member>
        <member name="T:Snails.Agent.IPlayerCommand">
            <summary>
            A command representing a move on the board from <see cref="P:Snails.Agent.IPlayerCommand.Origin"/> to <see cref="P:Snails.Agent.IPlayerCommand.Origin"/>+<see cref="P:Snails.Agent.IPlayerCommand.Delta"/>
            </summary>
        </member>
        <member name="P:Snails.Agent.IPlayerCommand.Origin">
            <summary>
            The player's starting position on the game board
            </summary>
        </member>
        <member name="P:Snails.Agent.IPlayerCommand.Delta">
            <summary>
            The instructed movement delta on the game board
            </summary>
        </member>
        <member name="T:Snails.Agent.Move">
            <summary>
            A move on the board originating at position 'From' to position 'To' in direction 'Direction'.
            </summary>
        </member>
        <member name="P:Snails.Agent.Move.From">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="P:Snails.Agent.Move.To">
            <summary>
            The destination of the move
            </summary>
        </member>
        <member name="P:Snails.Agent.Move.Delta">
            <summary>
            The movement vector
            </summary>
        </member>
        <member name="P:Snails.Agent.Move.Changes">
            <summary>
            Square changes resulting from executing/undoing this move
            </summary>
        </member>
        <member name="T:Snails.Agent.NegamaxAgent">
            <summary>
            This agent uses a search approach (negamax with move ordering based on static evaluation and iterative deepening) to compute its moves
            </summary>
        </member>
        <member name="M:Snails.Agent.NegamaxAgent.Compute(Snails.IWorldState,Snails.Agent.Constraints,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Implements a search approach (negamax with move ordering based on static evaluation and iterative deepening) to compute the next move
            </summary>
            <param name="worldState">The current game state</param>
            <param name="settings">The resource constraints to consider when computing the next move</param>
            <param name="cancel">An optional <see cref="T:System.Threading.CancellationToken"/> to request the cancellation of this operation</param>
            <returns>The next move to be performed</returns>
        </member>
        <member name="M:Snails.Agent.NegamaxAgent.Negamax(Snails.Agent.Board,System.Int32,System.Double,System.Double,Snails.Agent.Move@,System.Nullable{System.Threading.CancellationToken},System.Int32)">
            <summary>
            Negamax without move ordering
            </summary>
        </member>
        <member name="M:Snails.Agent.NegamaxAgent.NegamaxMO(Snails.Agent.Board,System.Int32,System.Double,System.Double,Snails.Agent.Move@,System.Nullable{System.Threading.CancellationToken},System.Int32)">
            <summary>
            Negamax with move ordering based on static evaluation.
            </summary>
        </member>
        <member name="T:Snails.Agent.PlayerAgent">
            <summary>
            Base class for implementing a player agent
            </summary>
            <remarks>
            This class implements <see cref="M:Snails.Agent.IPlayerAgent.ComputeNextMoveAsync(Snails.IWorldState,Snails.Agent.Constraints)"/>
            </remarks>
        </member>
        <member name="P:Snails.Agent.PlayerAgent.NumTimedOut">
            <summary>
            The number of times this agent failed to compute the next move after calling within the given <see cref="T:Snails.Agent.Constraints"/> after calling <see cref="M:Snails.Agent.PlayerAgent.ComputeNextMoveAsync(Snails.IWorldState,Snails.Agent.Constraints)"/> 
            </summary>
        </member>
        <member name="P:Snails.Agent.PlayerAgent.CpuTimeUsed">
            <summary>
            The total amount of compute time that was spend by this agent executing <see cref="M:Snails.Agent.PlayerAgent.ComputeNextMoveAsync(Snails.IWorldState,Snails.Agent.Constraints)"/> so far
            </summary>
        </member>
        <member name="M:Snails.Agent.PlayerAgent.ComputeNextMoveAsync(Snails.IWorldState,Snails.Agent.Constraints)">
            <summary>
            Compute the next move asynchronously. Not thread-safe.
            </summary>
            <param name="worldState">The current game state</param>
            <param name="constraints">Constraints restricting the resource usage</param>
            <returns>An awaitable Task yielding the computed move</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the agent failed to compute its next move within the specified resource constraints</exception>
        </member>
        <member name="M:Snails.Agent.PlayerAgent.Compute(Snails.IWorldState,Snails.Agent.Constraints,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Synchronous player agent logic to be implemented in a concrete subclass
            </summary>
            <param name="worldState">The current game state</param>
            <param name="constraints">Constraints restricting the resource usage</param>
            <param name="cancel">An optional <see cref="T:System.Threading.CancellationToken"/> to request the cancellation of this operation</param>
            <returns>The next move to be perfomed by this agent</returns>
        </member>
        <member name="T:Snails.Agent.Tile">
            <summary>
            Represents a square on the board. Provides functionality to check for contents more comfortable.
            </summary>
        </member>
        <member name="P:Snails.Agent.Tile.Position">
            <summary>
            The position of this square on the board
            </summary>
        </member>
        <member name="T:Snails.ContentType">
            <summary>
            The type of content of a tile on the game board
            </summary>
        </member>
        <member name="F:Snails.ContentType.Empty">
            <summary>
            An empty tile on the board that can be captured by players
            </summary>
        </member>
        <member name="F:Snails.ContentType.Impassable">
            <summary>
            A tile on the board that cannot be entered by players
            </summary>
        </member>
        <member name="F:Snails.ContentType.Snail">
            <summary>
            A player pawn
            </summary>
        </member>
        <member name="F:Snails.ContentType.Trail">
            <summary>
            A player's trail
            </summary>
        </member>
        <member name="T:Snails.IWorldState">
            <summary>
            Represents a state of the game
            </summary>
        </member>
        <member name="P:Snails.IWorldState.Item(System.Int32,System.Int32)">
            <summary>
            Access the contents of this game board
            </summary>
            <param name="x">The zero-based horizontal coordinate of the tile to be accessed</param>
            <param name="y">The zero-based vertical coordinate of the tile to be accessed</param>
            <returns></returns>
        </member>
        <member name="P:Snails.IWorldState.Size">
            <summary>
            The size of the board
            </summary>
        </member>
        <member name="P:Snails.IWorldState.Turn">
            <summary>
            The current turn number 
            </summary>
        </member>
        <member name="P:Snails.IWorldState.Player">
            <summary>
            The id of the player who's turn it is
            </summary>
        </member>
        <member name="P:Snails.Ray2Int.Destination">
            <summary>
            The destination of the move
            </summary>
        </member>
        <member name="P:Snails.Ray2Int.Delta">
            <summary>
            The movement vector
            </summary>
        </member>
        <member name="T:Snails.SquareChange">
            <summary>
            Represents an atomic board modification. Used to keep track of changes and undo moves on the board.
            </summary>
        </member>
        <member name="P:Snails.SquareChange.Position">
            <summary>
            The position on the board
            </summary>
        </member>
        <member name="P:Snails.SquareChange.PreviousContent">
            <summary>
            The content to discard
            </summary>
        </member>
        <member name="P:Snails.SquareChange.Content">
            <summary>
            The new content
            </summary>
        </member>
        <member name="T:Snails.TileData">
            <summary>
            Represents a single tile on the game board.
            Stores both the player id (6bit) and the content type (2bit) in one byte [0 - 255].
            </summary>
        </member>
        <member name="F:Snails.TileData.data">
            <summary>
            Format: 2 bits for the contents [0-3], 6 bits for the playerID [0 - 63]
            </summary>
        </member>
        <member name="M:Snails.TileData.#ctor(Snails.ContentType,System.UInt32)">
            <summary>
            Create a new tile with the given contents and player id
            </summary>
            <param name="contents">The contents of this tile</param>
            <param name="player">The id of the player this tile belongs to in the range [0, 63]</param>
        </member>
        <member name="M:Snails.TileData.#ctor(System.Byte)">
            <summary>
            Create a new tile from a raw <see cref="T:System.Byte"/> value
            </summary>
            <param name="data">The raw value to be interpreted as <see cref="T:Snails.TileData"/></param>
        </member>
        <member name="P:Snails.TileData.Contents">
            <summary>
            Get the contents of this tile
            </summary>
        </member>
        <member name="P:Snails.TileData.Player">
            <summary>
            Get the player ID [0-63] of this tile
            </summary>
        </member>
        <member name="P:Snails.TileData.Empty">
            <summary>
            An empty tile with its internal data set to zero.
            </summary>
        </member>
        <member name="M:Snails.TileData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Snails.TileData.Equals(Snails.TileData)">
            <inheritdoc/>
        </member>
        <member name="M:Snails.TileData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Snails.TileData.op_Equality(Snails.TileData,Snails.TileData)">
            <summary>
            Indicates whether the <paramref name="left"/> and <paramref name="right"/> operands are equal
            </summary>
            <returns>true if the operands are equal; otherwise false</returns>
        </member>
        <member name="M:Snails.TileData.op_Inequality(Snails.TileData,Snails.TileData)">
            <summary>
            Indicates whether the <paramref name="left"/> and <paramref name="right"/> operands are not equal
            </summary>
            <returns>true if the operands are not equal; otherwise false</returns>
        </member>
        <member name="M:Snails.TileData.ToString">
            <summary>
            A string representation of the data stored in this tile
            </summary>
        </member>
        <member name="M:Snails.TileData.op_Implicit(Snails.TileData)~System.Byte">
            <summary>
            Losslessly convert to byte
            </summary>
        </member>
        <member name="T:Snails.Vec2Int">
            <summary>
            A readonly two-component int vector
            </summary>
        </member>
        <member name="P:Snails.Vec2Int.X">
            <summary>
            The x component of the position
            </summary>
        </member>
        <member name="P:Snails.Vec2Int.Y">
            <summary>
            The y component of the position
            </summary>
        </member>
        <member name="M:Snails.Vec2Int.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new vector from two int values
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y comnponent</param>
        </member>
        <member name="F:Snails.Vec2Int.Zero">
            <summary>
            The zero vector. Identical to <code>new Vec2Int()</code> or <code>default(Vec2Int)</code>.
            </summary>
        </member>
        <member name="F:Snails.Vec2Int.Up">
            <summary>
            The up unit vector (0, 1)
            </summary>
        </member>
        <member name="F:Snails.Vec2Int.Down">
            <summary>
            The down unit vector (0, -1)
            </summary>
        </member>
        <member name="F:Snails.Vec2Int.Left">
            <summary>
            The left unit vector (-1, 0)
            </summary>
        </member>
        <member name="F:Snails.Vec2Int.Right">
            <summary>
            The right unit vector (1, 0)
            </summary>
        </member>
        <member name="F:Snails.Vec2Int.MinValue">
            <summary>
            A vector with both components set to <see cref="F:System.Int32.MinValue"/>
            </summary>
        </member>
        <member name="F:Snails.Vec2Int.MaxValue">
            <summary>
            A vector with both components set to <see cref="F:System.Int32.MaxValue"/>
            </summary>
        </member>
        <member name="M:Snails.Vec2Int.ToString">
            <summary>
            A string representation of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Snails.Vec2Int.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Snails.Vec2Int.Equals(Snails.Vec2Int)">
            <inheritdoc/>
        </member>
        <member name="M:Snails.Vec2Int.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Snails.Vec2Int.op_Equality(Snails.Vec2Int,Snails.Vec2Int)">
            <summary>
            Indicates whether the <paramref name="left"/> and <paramref name="right"/> operands are equal
            </summary>
            <returns>true if the operands are equal; otherwise false</returns>
        </member>
        <member name="M:Snails.Vec2Int.op_Inequality(Snails.Vec2Int,Snails.Vec2Int)">
            <summary>
            Indicates whether the <paramref name="left"/> and <paramref name="right"/> operands are not equal
            </summary>
            <returns>true if the operands are not equal; otherwise false</returns>
        </member>
        <member name="M:Snails.Vec2Int.op_Addition(Snails.Vec2Int,Snails.Vec2Int)">
            <summary>
            Perform a vector addition of the <paramref name="left"/> and <paramref name="right"/> operands
            </summary>
            <returns>The vector sum</returns>
        </member>
        <member name="M:Snails.Vec2Int.op_Subtraction(Snails.Vec2Int,Snails.Vec2Int)">
            <summary>
            Subtract the <paramref name="right"/> from the <paramref name="left"/> operand
            </summary>
            <returns>The difference of the two vectors</returns>
        </member>
        <member name="M:Snails.Vec2Int.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            Deconstructs the vector into its components <paramref name="x"/> and <paramref name="y"/>
            </summary>
        </member>
        <member name="T:Snails.WorldState">
            <summary>
            A basic implementation of <see cref="T:Snails.IWorldState"/> that can be used to construct game states to be passed to player agents implementing <see cref="T:Snails.Agent.IPlayerAgent"/>
            </summary>
        </member>
        <member name="M:Snails.WorldState.#ctor(Snails.Vec2Int,System.UInt32,System.Int32)">
            <summary>
            Create a new instance of the game state
            </summary>
            <param name="size">The size of the game board</param>
            <param name="player">The player id of the player who's turn it is</param>
            <param name="turn">The number of the current turn</param>
        </member>
        <member name="P:Snails.WorldState.Item(System.Int32,System.Int32)">
            <summary>
            Access and modify the contents of this game board
            </summary>
            <param name="x">The zero-based horizontal coordinate of the tile to be accessed</param>
            <param name="y">The zero-based vertical coordinate of the tile to be accessed</param>
            <returns></returns>
        </member>
        <member name="P:Snails.WorldState.Size">
            <summary>
            The size of the game board
            </summary>
        </member>
        <member name="P:Snails.WorldState.Turn">
            <summary>
            The number of the current turn
            </summary>
        </member>
        <member name="P:Snails.WorldState.Player">
            <summary>
            The player id of the player who's turn it is
            </summary>
        </member>
    </members>
</doc>
